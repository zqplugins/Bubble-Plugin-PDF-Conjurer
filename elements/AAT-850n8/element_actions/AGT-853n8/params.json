{
    "caption": "Add column to repeated table",
    "fields": {
        "AGX": {
            "caption": "Thing type",
            "doc": "The type of thing you want this column to read lists of data from.",
            "editor": "custom_type",
            "name": "thing_type",
            "rank": 1
        },
        "AGY": {
            "caption": "Field of thing",
            "doc": "A list type field of the thing specified above. Each repeated table will make the list in this field into a table column.",
            "editor": "custom_field_AGX",
            "name": "field_of_thing",
            "rank": 2
        },
        "AGZ": {
            "caption": "Data source",
            "doc": "List of things to draw data from. For example the first repeated table will read the first thing in this list and then pick the list of text/number/date/etc inside it and use to form the column. In other words, here you must pass a list of lists. Don't worry, experiment and see what happens. Be courageous! ðŸ˜Š",
            "editor": "DynamicValue",
            "is_list": true,
            "name": "data_source",
            "rank": 3,
            "value": "custom_data_AGX"
        },
        "AGc": {
            "caption": "Table name",
            "doc": "Unique table name so you can add columns to it and end it.",
            "editor": "DynamicValue",
            "name": "table_name",
            "rank": 4,
            "value": "text"
        },
        "AGg": {
            "caption": "Repeating structure name",
            "doc": "The repeating structure this table is being repeated into.",
            "editor": "DynamicValue",
            "name": "repeating_structure_name",
            "rank": 5,
            "value": "text"
        },
        "AGj": {
            "caption": "Column header",
            "doc": "The title of this column. Can be empty.",
            "editor": "DynamicValue",
            "name": "column_header",
            "optional": true,
            "rank": 6,
            "value": "text"
        },
        "AGz": {
            "caption": "Attention: This advanced action is only to be used inside a \"Repeated structure\".",
            "editor": "Label",
            "name": "attention:_this_advanced_action_is_only_to_be_used_inside_a_\"repeated_structure\".",
            "rank": 0
        },
        "AOO": {
            "caption": "Parse BBCode",
            "default_val": false,
            "doc": "If \"Yes\", it will interpret [b]hello[/b] as a bold hello. Search the web to understand what BBCode is. Official is: https://www.bbcode.org/ To help, BBCode is what is outputted by rich text editors.  All standard BBCode tags are supported, except for the video tag. At the site above you will be able to see what are the standard tags.  The style defined in BBCode will override the style defined in the \"Define new style for\" action.  Non-standard tags that are outputted by Bubble's rich text editors are supported as well. The legacy rich text editor from Bubble will work fine. A new one from Bubble uses a different line break scheme, this means line breaks will sometimes disappear, in other words, some \"new line\"s will be \"skipped\" or \"eaten\". This new line problem will not affect the table itself, it will only affect the text content inside the cell. Also, this may be fixed eventually by external forces, but parsing BBCode will throw an error in Apple devices for client side workflow actions due to something that is Apple's fault, so for it to work in Apple devices you must not parse BBCode or use the server side (backend) version of the workflow actions. You can differentiate them because client side uses \"PDF Model X\" in the name, while backend version will not have that suffix. Also, client and server side workflow action versions do not mix.",
            "editor": "DynamicValue",
            "name": "parse_bbcode",
            "rank": 7,
            "value": "boolean"
        }
    }
}